#!/usr/bin/env python3
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è HTML –≤ Mustache
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è, –∞ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
"""

import os
import sys
import json
import re

# –¢–µ—Å—Ç–æ–≤—ã–π HTML —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏, —Ç–∞–±–ª–∏—Ü–∞–º–∏, inline-—Å—Ç–∏–ª—è–º–∏
TEST_HTML = """
<!DOCTYPE html>
<html>
<head>
<style>
.gradient-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 40px;
}
.stats-card {
    border: 2px solid #e5e7eb;
    border-radius: 12px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
}
</style>
</head>
<body>
<table width="600" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
  <tr>
    <td style="padding: 40px; text-align: center;">
      <h1 style="color: #ffffff; font-size: 32px; margin: 0;">–†–µ–≤–æ–ª—é—Ü–∏—è –≤ HR-–ø–æ–¥–±–æ—Ä–µ</h1>
      <p style="color: #f3f4f6; font-size: 18px; margin-top: 16px;">
        –£–≤–µ–ª–∏—á—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–π–º–∞ –Ω–∞ 300% —Å –ø–æ–º–æ—â—å—é –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
      </p>
    </td>
  </tr>
</table>

<table width="600" style="margin-top: 32px;">
  <tr>
    <td class="stats-card" style="padding: 24px; border: 2px solid #e5e7eb; border-radius: 12px;">
      <h2 style="color: #1f2937; font-size: 48px; margin: 0;">2,500+</h2>
      <p style="color: #6b7280; font-size: 16px;">HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç</p>
    </td>
  </tr>
</table>

<table width="600" style="margin-top: 24px;">
  <tr>
    <td style="text-align: center; padding: 16px;">
      <a href="https://example.com/demo" style="background: linear-gradient(90deg, #667eea, #764ba2); color: white; padding: 16px 32px; border-radius: 8px; text-decoration: none; display: inline-block; font-weight: bold;">
        –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
      </a>
    </td>
  </tr>
</table>
</body>
</html>
"""

def check_styles_preserved(original: str, converted: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –º–µ—Å—Ç–µ"""
    checks = {
        'gradient_preserved': 'linear-gradient' in converted,
        'inline_styles': 'style=' in converted,
        'style_tag': '<style>' in converted,
        'padding_preserved': 'padding:' in converted or 'padding=' in converted,
        'colors_preserved': '#667eea' in converted or '#764ba2' in converted,
        'box_shadow': 'box-shadow' in converted,
        'border_radius': 'border-radius' in converted
    }
    return checks

def check_content_replaced(converted: str) -> dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
    checks = {
        'has_mustache_vars': '{{' in converted and '}}' in converted,
        'no_hardcoded_text': '–†–µ–≤–æ–ª—é—Ü–∏—è –≤ HR-–ø–æ–¥–±–æ—Ä–µ' not in converted,
        'no_hardcoded_numbers': '2,500+' not in converted,
        'no_hardcoded_url': 'https://example.com/demo' not in converted,
        'no_hardcoded_cta': '–ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ' not in converted
    }
    return checks

def analyze_conversion(original: str, converted: str):
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*80)
    print("–¢–ï–°–¢ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø HTML ‚Üí MUSTACHE")
    print("="*80)
    
    print(f"\nüìä –†–∞–∑–º–µ—Ä: {len(original)} ‚Üí {len(converted)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("\n‚úÖ –ü–†–û–í–ï–†–ö–ê –°–¢–ò–õ–ï–ô (–¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è):")
    style_checks = check_styles_preserved(original, converted)
    for check, passed in style_checks.items():
        status = "‚úÖ" if passed else "‚ùå"
        print(f"  {status} {check}: {passed}")
    
    print("\nüîÑ –ü–†–û–í–ï–†–ö–ê –ó–ê–ú–ï–ù–´ –ö–û–ù–¢–ï–ù–¢–ê (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–º–µ–Ω—ë–Ω):")
    content_checks = check_content_replaced(converted)
    for check, passed in content_checks.items():
        status = "‚úÖ" if passed else "‚ùå"
        print(f"  {status} {check}: {passed}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    all_style_ok = all(style_checks.values())
    all_content_ok = all(content_checks.values())
    
    print("\n" + "="*80)
    if all_style_ok and all_content_ok:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –°—Ç–∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return True
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù:")
        if not all_style_ok:
            print("   - –°—Ç–∏–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã")
        if not all_content_ok:
            print("   - –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        return False

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.environ.get('OPENROUTER_API_KEY')
    if not api_key:
        print("‚ùå –û—à–∏–±–∫–∞: OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: export OPENROUTER_API_KEY=your_key")
        sys.exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π HTML: {len(TEST_HTML)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    from index import convert_to_template_ai
    
    try:
        print("\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI o1...")
        result = convert_to_template_ai(TEST_HTML, api_key)
        
        print("\nüìÑ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø:")
        print("-" * 80)
        print(result[:500] + "..." if len(result) > 500 else result)
        print("-" * 80)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        success = analyze_conversion(TEST_HTML, result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
        with open('/tmp/converted_template.html', 'w') as f:
            f.write(result)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ /tmp/converted_template.html")
        
        sys.exit(0 if success else 1)
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    main()
