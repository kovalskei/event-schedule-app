#!/usr/bin/env python3
"""–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è HTML –≤ Mustache —à–∞–±–ª–æ–Ω"""

import json

# –¢–µ—Å—Ç–æ–≤—ã–π HTML —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
test_html = """<!DOCTYPE html><html><head><style>.gradient{background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);}</style></head><body><table width="600" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);"><tr><td style="padding:40px;text-align:center;"><h1 style="color:#fff;font-size:32px;">–†–µ–≤–æ–ª—é—Ü–∏—è –≤ HR</h1><p style="color:#f3f4f6;font-size:18px;">–£–≤–µ–ª–∏—á—å—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –Ω–∞–π–º–∞ –Ω–∞ 300%</p></td></tr></table><table width="600" style="margin-top:32px;"><tr><td style="padding:24px;border:2px solid #e5e7eb;border-radius:12px;"><h2 style="color:#1f2937;font-size:48px;">2,500+</h2><p style="color:#6b7280;">HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç</p></td></tr></table><table width="600"><tr><td style="text-align:center;"><a href="https://example.com/demo" style="background:linear-gradient(90deg,#667eea,#764ba2);color:white;padding:16px 32px;border-radius:8px;text-decoration:none;font-weight:bold;">–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ</a></td></tr></table></body></html>"""

print("="*80)
print("–¢–ï–°–¢: –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï HTML ‚Üí MUSTACHE TEMPLATE")
print("="*80)

print(f"\nüì• –ò–°–•–û–î–ù–´–ô HTML ({len(test_html)} —Å–∏–º–≤–æ–ª–æ–≤):")
print("-"*80)
print(test_html[:300] + "...")
print("-"*80)

# –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ —á—Ç–æ –î–û–õ–ñ–ù–û –±—ã—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
expected_features = {
    "–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è": ["linear-gradient(135deg,#667eea 0%,#764ba2 100%)", "linear-gradient(90deg,#667eea,#764ba2)"],
    "Inline —Å—Ç–∏–ª–∏ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è": ["style=\"padding:40px", "style=\"color:#fff", "style=\"border:2px solid #e5e7eb"],
    "<style> —Ç–µ–≥ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è": ["<style>", ".gradient{background:linear-gradient"],
    "–¶–≤–µ—Ç–∞ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è": ["#667eea", "#764ba2", "#e5e7eb", "#1f2937", "#6b7280"],
    "border-radius –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è": ["border-radius:12px", "border-radius:8px"],
    "padding –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è": ["padding:40px", "padding:24px", "padding:16px 32px"],
    
    "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ {{vars}}": "–†–µ–≤–æ–ª—é—Ü–∏—è –≤ HR",
    "–ß–∏—Å–ª–∞ –¥–æ–ª–∂–Ω—ã –∑–∞–º–µ–Ω–µ–Ω—ã": "2,500+",
    "URL –¥–æ–ª–∂–µ–Ω –∑–∞–º–µ–Ω—ë–Ω": "https://example.com/demo",
    "CTA —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–º–µ–Ω—ë–Ω": "–ù–∞—á–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
}

print("\n‚úÖ –ß–¢–û –î–û–õ–ñ–ù–û –°–û–•–†–ê–ù–ò–¢–¨–°–Ø:")
for feature, examples in expected_features.items():
    if isinstance(examples, list):
        print(f"  ‚Ä¢ {feature}")
        for ex in examples[:2]:
            print(f"    - {ex}")

print("\n‚ùå –ß–¢–û –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ó–ê–ú–ï–ù–ï–ù–û:")
for feature, value in expected_features.items():
    if isinstance(value, str):
        print(f"  ‚Ä¢ {feature}: '{value}' ‚Üí {{{{variable}}}}")

print("\n" + "="*80)
print("–°–µ–π—á–∞—Å –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API...")
print("="*80)

# –ó–∞–ø—Ä–æ—Å –∫ API
import requests

url = "https://functions.poehali.dev/616d6890-24c3-49c8-8b29-692dd342933b"
payload = {
    "html_content": test_html,
    "event_id": 1,
    "content_type_id": 1,
    "name": "Test Template"
}

try:
    print("\n‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ñ—É–Ω–∫—Ü–∏–∏...")
    response = requests.post(url, json=payload, timeout=120)
    
    print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! template_id={result.get('template_id')}, example_id={result.get('example_id')}")
        
        # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∏–º —à–∞–±–ª–æ–Ω –∏–∑ –ë–î —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        print("\n‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å html_template –∏–∑ –ë–î")
        print(f"   –ó–∞–ø—Ä–æ—Å: SELECT html_template FROM email_templates WHERE id={result.get('template_id')}")
        
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
        
except Exception as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
    import traceback
    traceback.print_exc()
